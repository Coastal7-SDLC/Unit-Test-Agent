{"ast":null,"code":"import axios from 'axios';\nconst API_BASE_URL = process.env.REACT_APP_API_URL || 'http://localhost:8000/api';\nconst api = axios.create({\n  baseURL: API_BASE_URL,\n  headers: {\n    'Content-Type': 'application/json'\n  }\n});\n\n// Request interceptor\napi.interceptors.request.use(config => {\n  // Add any auth tokens here if needed\n  return config;\n}, error => {\n  return Promise.reject(error);\n});\n\n// Response interceptor\napi.interceptors.response.use(response => {\n  return response;\n}, error => {\n  console.error('API Error:', error);\n  return Promise.reject(error);\n});\nexport const analysisAPI = {\n  // Start repository analysis\n  startAnalysis: async data => {\n    const response = await api.post('/analyze', data);\n    return response.data;\n  },\n  // Get task status\n  getTaskStatus: async taskId => {\n    const response = await api.get(`/status/${taskId}`);\n    return response.data;\n  },\n  // Get analysis results\n  getAnalysisResults: async taskId => {\n    const response = await api.get(`/results/${taskId}`);\n    return response.data;\n  },\n  // Download test files\n  downloadTestFiles: async taskId => {\n    const response = await api.get(`/download/${taskId}/tests`, {\n      responseType: 'blob'\n    });\n    return response.data;\n  },\n  // Download coverage report\n  downloadCoverageReport: async taskId => {\n    const response = await fetch(`${API_BASE_URL}/download-coverage-report/${taskId}`, {\n      method: 'GET',\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    });\n    if (!response.ok) {\n      const errorText = await response.text();\n      throw new Error(errorText || 'Failed to download coverage report');\n    }\n    return response.blob();\n  },\n  // Health check\n  healthCheck: async () => {\n    const response = await api.get('/health');\n    return response.data;\n  }\n};\nexport default api;","map":{"version":3,"names":["axios","API_BASE_URL","process","env","REACT_APP_API_URL","api","create","baseURL","headers","interceptors","request","use","config","error","Promise","reject","response","console","analysisAPI","startAnalysis","data","post","getTaskStatus","taskId","get","getAnalysisResults","downloadTestFiles","responseType","downloadCoverageReport","fetch","method","ok","errorText","text","Error","blob","healthCheck"],"sources":["D:/Unit_Test_Agent/frontend/src/services/api.js"],"sourcesContent":["import axios from 'axios';\r\n\r\nconst API_BASE_URL = process.env.REACT_APP_API_URL || 'http://localhost:8000/api';\r\n\r\nconst api = axios.create({\r\n  baseURL: API_BASE_URL,\r\n  headers: {\r\n    'Content-Type': 'application/json',\r\n  },\r\n});\r\n\r\n// Request interceptor\r\napi.interceptors.request.use(\r\n  (config) => {\r\n    // Add any auth tokens here if needed\r\n    return config;\r\n  },\r\n  (error) => {\r\n    return Promise.reject(error);\r\n  }\r\n);\r\n\r\n// Response interceptor\r\napi.interceptors.response.use(\r\n  (response) => {\r\n    return response;\r\n  },\r\n  (error) => {\r\n    console.error('API Error:', error);\r\n    return Promise.reject(error);\r\n  }\r\n);\r\n\r\nexport const analysisAPI = {\r\n  // Start repository analysis\r\n  startAnalysis: async (data) => {\r\n    const response = await api.post('/analyze', data);\r\n    return response.data;\r\n  },\r\n\r\n  // Get task status\r\n  getTaskStatus: async (taskId) => {\r\n    const response = await api.get(`/status/${taskId}`);\r\n    return response.data;\r\n  },\r\n\r\n  // Get analysis results\r\n  getAnalysisResults: async (taskId) => {\r\n    const response = await api.get(`/results/${taskId}`);\r\n    return response.data;\r\n  },\r\n\r\n  // Download test files\r\n  downloadTestFiles: async (taskId) => {\r\n    const response = await api.get(`/download/${taskId}/tests`, {\r\n      responseType: 'blob',\r\n    });\r\n    return response.data;\r\n  },\r\n\r\n  // Download coverage report\r\n  downloadCoverageReport: async (taskId) => {\r\n    const response = await fetch(`${API_BASE_URL}/download-coverage-report/${taskId}`, {\r\n      method: 'GET',\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n      },\r\n    });\r\n\r\n    if (!response.ok) {\r\n      const errorText = await response.text();\r\n      throw new Error(errorText || 'Failed to download coverage report');\r\n    }\r\n\r\n    return response.blob();\r\n  },\r\n\r\n  // Health check\r\n  healthCheck: async () => {\r\n    const response = await api.get('/health');\r\n    return response.data;\r\n  },\r\n};\r\n\r\nexport default api;\r\n"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AAEzB,MAAMC,YAAY,GAAGC,OAAO,CAACC,GAAG,CAACC,iBAAiB,IAAI,2BAA2B;AAEjF,MAAMC,GAAG,GAAGL,KAAK,CAACM,MAAM,CAAC;EACvBC,OAAO,EAAEN,YAAY;EACrBO,OAAO,EAAE;IACP,cAAc,EAAE;EAClB;AACF,CAAC,CAAC;;AAEF;AACAH,GAAG,CAACI,YAAY,CAACC,OAAO,CAACC,GAAG,CACzBC,MAAM,IAAK;EACV;EACA,OAAOA,MAAM;AACf,CAAC,EACAC,KAAK,IAAK;EACT,OAAOC,OAAO,CAACC,MAAM,CAACF,KAAK,CAAC;AAC9B,CACF,CAAC;;AAED;AACAR,GAAG,CAACI,YAAY,CAACO,QAAQ,CAACL,GAAG,CAC1BK,QAAQ,IAAK;EACZ,OAAOA,QAAQ;AACjB,CAAC,EACAH,KAAK,IAAK;EACTI,OAAO,CAACJ,KAAK,CAAC,YAAY,EAAEA,KAAK,CAAC;EAClC,OAAOC,OAAO,CAACC,MAAM,CAACF,KAAK,CAAC;AAC9B,CACF,CAAC;AAED,OAAO,MAAMK,WAAW,GAAG;EACzB;EACAC,aAAa,EAAE,MAAOC,IAAI,IAAK;IAC7B,MAAMJ,QAAQ,GAAG,MAAMX,GAAG,CAACgB,IAAI,CAAC,UAAU,EAAED,IAAI,CAAC;IACjD,OAAOJ,QAAQ,CAACI,IAAI;EACtB,CAAC;EAED;EACAE,aAAa,EAAE,MAAOC,MAAM,IAAK;IAC/B,MAAMP,QAAQ,GAAG,MAAMX,GAAG,CAACmB,GAAG,CAAC,WAAWD,MAAM,EAAE,CAAC;IACnD,OAAOP,QAAQ,CAACI,IAAI;EACtB,CAAC;EAED;EACAK,kBAAkB,EAAE,MAAOF,MAAM,IAAK;IACpC,MAAMP,QAAQ,GAAG,MAAMX,GAAG,CAACmB,GAAG,CAAC,YAAYD,MAAM,EAAE,CAAC;IACpD,OAAOP,QAAQ,CAACI,IAAI;EACtB,CAAC;EAED;EACAM,iBAAiB,EAAE,MAAOH,MAAM,IAAK;IACnC,MAAMP,QAAQ,GAAG,MAAMX,GAAG,CAACmB,GAAG,CAAC,aAAaD,MAAM,QAAQ,EAAE;MAC1DI,YAAY,EAAE;IAChB,CAAC,CAAC;IACF,OAAOX,QAAQ,CAACI,IAAI;EACtB,CAAC;EAED;EACAQ,sBAAsB,EAAE,MAAOL,MAAM,IAAK;IACxC,MAAMP,QAAQ,GAAG,MAAMa,KAAK,CAAC,GAAG5B,YAAY,6BAA6BsB,MAAM,EAAE,EAAE;MACjFO,MAAM,EAAE,KAAK;MACbtB,OAAO,EAAE;QACP,cAAc,EAAE;MAClB;IACF,CAAC,CAAC;IAEF,IAAI,CAACQ,QAAQ,CAACe,EAAE,EAAE;MAChB,MAAMC,SAAS,GAAG,MAAMhB,QAAQ,CAACiB,IAAI,CAAC,CAAC;MACvC,MAAM,IAAIC,KAAK,CAACF,SAAS,IAAI,oCAAoC,CAAC;IACpE;IAEA,OAAOhB,QAAQ,CAACmB,IAAI,CAAC,CAAC;EACxB,CAAC;EAED;EACAC,WAAW,EAAE,MAAAA,CAAA,KAAY;IACvB,MAAMpB,QAAQ,GAAG,MAAMX,GAAG,CAACmB,GAAG,CAAC,SAAS,CAAC;IACzC,OAAOR,QAAQ,CAACI,IAAI;EACtB;AACF,CAAC;AAED,eAAef,GAAG","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}